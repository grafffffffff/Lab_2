#include <iostream>#include <string>#include <fstream>#include "IDictionary.hpp"#include "LinkedListSequence.hpp"#include "ArraySequence.hpp"#include "LinkedList.hpp"#include "DynamicArray.hpp"#include "Sequence.hpp"using namespace std;void printLine(string str){    cout << str << "\n";}void print(string str){    cout << str;}int sizeOfPage(int number, int pageSize){    if (number == 1) {        return (int) pageSize / 2;    }    if (number % 10 == 0) {        return (int) pageSize * 3 / 4;    } else {        return pageSize;    }}Sequence<string>* splitText(string line){    Sequence<string>* sequence = new ArraySequence<string>();    string word = "";    int i = 0;    while (i < line.length()) {        if (line[i] == ' ') {            sequence->Append(word);            word = "";        } else if (i == line.length() - 1) {            word += line[i];            sequence->Append(word);            word = "";        } else {            word += line[i];        }        i++;    }    return sequence;}LinkedList<Sequence<string>*>* splitSequence(Sequence<string>* sequence, int pageSize){    LinkedList<Sequence<string>*>* newList = new LinkedList<Sequence<string>*>();    int countWords = 0;    int numberOfPage = 1;    int countSimbolsOfPage;    while (countWords < sequence->GetLength())    {        countSimbolsOfPage = 0;        Sequence<string>* sequenceFirst = new LinkedListSequence<string>();        newList->Append(sequenceFirst);        while (countWords < sequence->GetLength() && (countSimbolsOfPage + (sequence->Get(countWords)).length() <= sizeOfPage(numberOfPage, pageSize)))        {            countSimbolsOfPage += (sequence->Get(countWords)).length();            (newList->Get(numberOfPage - 1))->Append(sequence->Get(countWords));            countWords++;        }        numberOfPage++;    }    return newList;}string toString(LinkedList<Sequence<string>*>* list){    string s = "";    for (int i = 0; i < list->GetLength(); i++) {        Sequence<string>* seqOfWord = list->Get(i);        s += std::to_string(i + 1) + " ";        for (int j = 0; j < seqOfWord->GetLength(); j++) {            s += seqOfWord->Get(j) + " ";        }        s += "\n";    }    return s;}string toString(IDictionary<string, Sequence<int>*>* dict){    return dict->dictionary->getNode()->toStringSeq();}IDictionary<string, Sequence<int>*>* createAlphabeticalIndex(LinkedList<Sequence<string>*>* list){    string firstWord = list->GetFirst()->GetFirst();    Sequence<int>* firstWordSeq = new ArraySequence<int>();    firstWordSeq->Append(1);    IDictionary<std::string, Sequence<int>*>* dict = new IDictionary<std::string, Sequence<int>*>(firstWord, firstWordSeq, Comps::stringAscending);    for (int i = 0; i < list->GetLength(); i++) {        Sequence<std::string>* seqOfWord = list->Get(i);        for (int j = 0; j < seqOfWord->GetLength(); j++) {            std::string s = toString(dict);            std::string word = seqOfWord->Get(j);            auto w = dict->dictionary->getNode()->search(word);            if (dict->containsKey(word)) {                if (dict->get(word)->GetLast() != i + 1) {                    Sequence<int>* newPagesOfWord = new ArraySequence<int>();                    for (int k = 0; k < dict->get(word)->GetLength(); k++)                        newPagesOfWord->Append(dict->get(word)->Get(k));                    newPagesOfWord->Append(i + 1);                    dict->update(word, newPagesOfWord);                }            } else {                Sequence<int>* pagesOfNewWord = new ArraySequence<int>();                pagesOfNewWord->Append(i + 1);                dict->add(word, pagesOfNewWord);            }        }    }    return dict;}