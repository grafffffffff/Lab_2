#include <iostream>#include <string>#include <fstream>#include "AlphabeticalIndex.hpp"using namespace std;string menuMode() {    int mode;    printLine("Enter the operating mode:");    printLine("1. Free mode. \n2. End");    cin >> mode;    switch (mode) {        case 1: {            return "FREE MODE";            break;        }        case 2: {            return "END";            break;        }        default:            return "";            break;    }}void writeText(LinkedList<Sequence<string> *> *text) {    ofstream out;    out.open("/Users/nikitaalymov/CLionProjects/Lab_2/random_text.txt");    if (out.is_open()) {        for (int i = 0; i < text->GetLength(); i++) {            Sequence<string> *sequenceOfWord = text->Get(i);            out << to_string(i + 1) << "\n";            for (int j = 0; j < sequenceOfWord->GetLength(); j++) {                out << sequenceOfWord->Get(j) << " ";            }            out << "\n";        }    }    out.close();}Sequence<string> *createRandomText(int length) {    ifstream in("/Users/nikitaalymov/CLionProjects/Lab_2/words_for_random_text.txt");    string line;    if (in.is_open())        getline(in, line);    Sequence<string> *glossary = splitText(line);    Sequence<string> *text = new ArraySequence<string>();    for (int i = 0; i < length; i++) {        text->Append(glossary->Get(rand() % (glossary->GetLength() - 1)));    }    return text;}void menu() {    string mode;    do {        mode = menuMode();        if (mode == "FREE MODE") {            int words;            int pageSize;            print("Enter the number of words in the text:");            cin >> words;//          words--;            print("Enter the number of symbols per page:");            cin >> pageSize;//                pageSize--;            Sequence<string> *seq = createRandomText(words);//            cout << "seq success";            LinkedList<Sequence<string> *> *list = splitSequence(seq, pageSize);//            cout << "list success";            IDictionary<string, Sequence<int> *> *dict = createAlphabeticalIndex(list);//            cout << "dict success";            string s = toString(dict);            cout << s;            writeText(list);        }    } while (mode != "END");}